// Overall program
start: program
program: (_top_level_program_line)*

// Types
_value_type: type_name
           | struct_type
           | function_type
value_type: _value_type
ref_type: "&" _value_type
type: _value_type | ref_type

variable_name: CNAME
type_name: CNAME
struct_type: "(" (variable_name ":" value_type ("," variable_name ":" value_type)*)? ")"
function_type: type "->" type

// Top level
_top_level_program_line: _top_level_program_feature ";"
_top_level_program_feature: typedef
                          | named_function
                          | operator_function
                          | constructor_function
                          | destructor_function
                          | variable_declaration
                          | const_declaration

typedef: "typedef" type_name ":" type

function_name: CNAME
function_arguments: "(" (variable_name ":" type ("," variable_name ":" type)*)? ")"
_function_definition: ":" function_arguments "->" type "=" "{" (_line_of_code)* "}"
named_function: "function" function_name _function_definition
operator_function: "@operator" operator _function_definition
constructor_function: "@constructor" _function_definition
destructor_function: "@destructor" _function_definition

// Local scope
_line_of_code: _line_of_code_without_semi ";"
_line_of_code_without_semi: expression
                          | variable_declaration
                          | const_declaration
                          | return_statement

expression: function_call
          | variable_name
          | operator_use
          | "(" expression ")"
          | struct_initialization
          | SIGNED_INT
          | SIGNED_FLOAT

variable_declaration: "let" variable_name ":" type ("=" expression)?
const_declaration: "const" variable_name ":" type "=" expression
return_statement: "return" (expression)?
function_call: function_name "(" (inner_list_with_names | inner_list_without_names) ")"

inner_list_with_names: variable_name ":" expression ("," variable_name ":" expression)*
inner_list_without_names: (expression ("," expression)*)?
struct_initialization: "{" (inner_list_with_names | inner_list_without_names) "}"

operator_use: expression operator expression
operator: /[.<>%*$@|&\/=?!+-]+/
 
%ignore C_COMMENT
%ignore CPP_COMMENT
%ignore WS
%import common.C_COMMENT
%import common.CNAME
%import common.CPP_COMMENT
%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.WS
